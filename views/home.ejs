 <% layout('layouts/boilerplate') -%>
<link rel="stylesheet" href="/css/home.css">
<link rel="stylesheet" href="/css/chatbot.css">
<link rel="stylesheet" href="/css/nav.css">

<body> 
    <div class="search-bar">
        <form action="/listing/filter" method="POST" class="form-search">
          <input type="text" name="search" placeholder="Search jobs" />
          <button type="submit" class="btn-search">Search</button>
        </form>
      </div>
    <div class="all-listings">
        <div class="heading"><h1 class="h1">ALL JOBS</h1></div>
         <ul>
            <% for(let listing of listings) { %>
            <a href="/listing/<%= listing._id %>">
               <li><%= listing.title %>
               <p class="postedDate"><span>submited : </span>  
                  <% if(listing.postedDate) { %> 
                     <%=listing.postedDate.toDateString()%>
                  <% } %>
                  </p>
                
               </li>
            </a>
            <% } %>
         </ul>
    </div>

    <div class="chatbot-container">
      <button class="chatbot-toggler">
          <span class="material-symbols-rounded">chat</span>
          <span class="material-symbols-outlined">close</span>
      </button>
      <div class="chatbot">
          <header>
              <h2>Chatbot</h2>
              <span class="close-btn material-symbols-outlined">close</span>
          </header>
          <ul class="chatbox">
              <li class="chat incoming">
                  <span class="material-symbols-outlined">bot</span>
                  <p>Hi there! <br>How can I help you today?</p>
              </li>
          </ul>
          <div class="chat-input">
              <textarea placeholder="Enter a message..." spellcheck="false" required></textarea>
              <span id="send-btn" class="material-symbols-rounded">send</span>
          </div>
      </div>
  </div>

  <script>
      const chatbotToggler = document.querySelector(".chatbot-toggler");
      const closeBtn = document.querySelector(".close-btn");
      const chatbox = document.querySelector(".chatbox");
      const chatInput = document.querySelector(".chat-input textarea");
      const sendChatBtn = document.querySelector("#send-btn");
      let userMessage = null; 
      const inputInitHeight = chatInput.scrollHeight;

      // API configuration
      const API_KEY = "AIzaSyDlbD0rzDEtbVzTdhI5cmwexfaWgKbanlw"; // Replace with your actual API key
      const API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${API_KEY}`;

      const createChatLi = (message, className) => {
          const chatLi = document.createElement("li");
          chatLi.classList.add("chat", className);
          let chatContent = className === "outgoing" 
              ? `<p>${message}</p>` 
              : `<span class="material-symbols-outlined">smart_toy</span><p>${message}</p>`;
          chatLi.innerHTML = chatContent;
          return chatLi;
      };

      const generateResponse = async (chatElement) => {
          const messageElement = chatElement.querySelector("p");

          const requestOptions = {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ 
                  contents: [{ 
                      role: "user", 
                      parts: [{ text: userMessage }] 
                  }] 
              }),
          };

          try {
              const response = await fetch(API_URL, requestOptions);
              const data = await response.json();
              if (!response.ok) throw new Error(data.error.message);
              
              messageElement.textContent = data.candidates[0].content.parts[0].text.replace(/\\(.?)\\*/g, '$1');
          } catch (error) {
              messageElement.classList.add("error");
              messageElement.textContent = error.message;
          } finally {
              chatbox.scrollTo(0, chatbox.scrollHeight);
          }
      };

      const handleChat = () => {
          userMessage = chatInput.value.trim();
          if (!userMessage) return;

          chatInput.value = "";
          chatInput.style.height = `${inputInitHeight}px`;

          chatbox.appendChild(createChatLi(userMessage, "outgoing"));
          chatbox.scrollTo(0, chatbox.scrollHeight);

          setTimeout(() => {
              const incomingChatLi = createChatLi("Thinking...", "incoming");
              chatbox.appendChild(incomingChatLi);
              chatbox.scrollTo(0, chatbox.scrollHeight);
              generateResponse(incomingChatLi);
          }, 600);
      };

      chatInput.addEventListener("input", () => {
          chatInput.style.height = `${inputInitHeight}px`;
          chatInput.style.height = `${chatInput.scrollHeight}px`;
      });

      chatInput.addEventListener("keydown", (e) => {
          if (e.key === "Enter" && !e.shiftKey && window.innerWidth > 800) {
              e.preventDefault();
              handleChat();
          }
      });

      sendChatBtn.addEventListener("click", handleChat);
      closeBtn.addEventListener("click", () => document.body.classList.remove("show-chatbot"));
      chatbotToggler.addEventListener("click", () => document.body.classList.toggle("show-chatbot"));
  </script>
</body>
